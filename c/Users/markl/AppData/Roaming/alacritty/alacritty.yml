# Resources:
# Configs:       https://github.com/tmcdonell/config-alacritty/blob/master/alacritty.yml
# Color Schemes: https://github.com/alacritty/alacritty/wiki/Color-schemes

shell:
 program: "C:\\Windows\\System32\\wsl.exe"

# Colors (Tango)
colors:
  primary:
    background: "#1e2127"
    # background: "#2E3440"
    foreground: "#D8DEE9"

  # Normal colors
  normal:
    black:   '#2e3436'
    red:     '#cc0000'
    green:   '#73d216'
    yellow:  '#edd400'
    blue:    '#3465a4'
    magenta: '#75507b'
    cyan:    '#06989a'
    white:   '#d3d7cf'

  # Bright colors
  bright:
    black:   '#2e3436'
    red:     '#ef2929'
    green:   '#8ae234'
    yellow:  '#fce94f'
    blue:    '#729fcf'
    magenta: '#ad7fa8'
    cyan:    '#34e2e2'
    white:   '#eeeeec'

# Visual Bell
#
# DEPRECATED. Use `bell` instead of `visual_bell`
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Possible values for `animation`
# `Ease`
# `EaseOut`
# `EaseOutSine`
# `EaseOutQuad`
# `EaseOutCubic`
# `EaseOutQuart`
# `EaseOutQuint`
# `EaseOutExpo`
# `EaseOutCirc`
# `Linear`
#
# To completely disable the visual bell, set its duration to 0.
#
bell:
  animation: EaseOutExpo
  color: '0xffffff'
  duration: 0

# DEPRECATED: See opacity under window:
# background_opacity: 0.85

font:
  # OPERATOR MONO
  # normal:
  #   family: "OperatorMono Nerd Font"
  #   style: Book
  # bold:
  #   family: "OperatorMono Nerd Font"
  #   style: Bold
  # italic:
  #   family: "OperatorMono Nerd Font"
  #   style: "Book Italic"
  # bold_italic:
  #   family: "OperatorMono Nerd Font"
  #   style: "Bold Italic"

  # SOURCE CODE PRO
  # normal:
  #   family: "Source Code Pro iCursive S12"
  #   style: Regular
  # bold:
  #   family: "Source Code Pro iCursive S12"
  #   style: Bold
  # italic:
  #   family: "Source Code Pro iCursive S12"
  #   style: "Italic"
  # bold_italic:
  #   family: "Source Code Pro iCursive S12"
  #   style: "Bold Italic"

  # SAUCE CODE PRO
  # normal:
  #   family: "SauceCodePro NF"
  #   style: Regular
  # bold:
  #   family: "SauceCodePro NF"
  #   style: Bold
  # italic:
  #   family: "SauceCodePro NF"
  #   style: "Italic"
  # bold_italic:
  #   family: "SauceCodePro NF"
  #   style: "Bold Italic"

  # VictorMono
  normal:
    family: "VictorMono NF"
    style: Regular
  bold:
    family: "VictorMono NF"
    style: Bold
  italic:
    family: "VictorMono NF"
    style: "Italic"
  bold_italic:
    family: "VictorMono NF"
    style: "Bold Italic"

  # Point size
  size: 12.0

  # Offset is the extra space around each character. offset.y can be thought of
  # as modifying the linespacing, and offset.x as modifying the letter spacing.
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increase the x offset to move the glyph to
  # the right, increase the y offset to move the glyph upward.
  glyph_offset:
    x: 0
    y: 0

window:

  # opacity: 0.85

  # Window dimensions (changes require restart)
  #
  # Specified in number of columns/lines, not pixels. If both are zero this
  # setting is ignored.
  dimensions:
    columns: 0
    lines: 0

  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is not scaled by
  # DPI and the specified value is always added at both opposing sides.
  padding:
    x: 0
    y: 0

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: false

  # Window decorations
  #
  # Available values:
  # - full: borders and title bar
  # - none: neither borders nor title bar
  # - transparent: title bar, transparent background and title bar buttons
  # - buttonless: title bar, transparent background, but no title bar buttons
  decorations: full

  # Startup Mode (changes require restart)
  #
  # Values for `startup_mode`:
  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  #
  # Values for `startup_mode` (macOS only):
  #   - SimpleFullscreen
  startup_mode: Windowed

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 10000

  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  multiplier: 10

# If `true`, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors: true

selection:
  semantic_escape_chars: ',│`|:"'' ()[]{}<>'
  save_to_clipboard: true

live_config_reload: true

mouse:
  hide_when_typing: true

cursor:
  # Cursor style
  #
  # Values for 'style':
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  style: Block

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true


# Key bindings
#
# Key bindings are specified as a list of objects. Each binding will specify a
# key and modifiers required to trigger it, terminal modes where the binding is
# applicable, and what should be done when the key binding fires. It can either
# send a byte sequence to the running application (`chars`), execute a
# predefined action (`action`) or fork and execute a specified command plus
# arguments (`command`).
#
# Bindings are always filled by default, but will be replaced when a new binding
# with the same triggers is defined. To unset a default binding, it can be
# mapped to the `None` action.
#
# Example:
#   `- { key: V, mods: Control|Shift, action: Paste }`
#
# Available fields:
#   - key
#   - mods (optional)
#   - chars | action | command (exactly one required)
#   - mode (optional)
#
# Values for `key`:
#   - `A` -> `Z`
#   - `F1` -> `F12`
#   - `Key1` -> `Key0`
#
#   A full list with available key codes can be found here:
#   https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
#   Instead of using the name of the keys, the `key` field also supports using
#   the scancode of the desired key. Scancodes have to be specified as a
#   decimal number.
#   This command will allow you to display the hex scancodes for certain keys:
#     `showkey --scancodes`
#
# Values for `mods`:
#   - Command
#   - Control
#   - Option
#   - Super
#   - Shift
#   - Alt
#
#   Multiple `mods` can be combined using `|` like this: `mods: Control|Shift`.
#   Whitespace and capitalization is relevant and must match the example.
#
# Values for `chars`:
#   The `chars` field writes the specified string to the terminal. This makes
#   it possible to pass escape sequences.
#   To find escape codes for bindings like `PageUp` ("\x1b[5~"), you can run
#   the command `showkey -a` outside of tmux.
#   Note that applications use terminfo to map escape sequences back to
#   keys. It is therefore required to update the terminfo when
#   changing an escape sequence.
#
# Values for `action`:
#   - Paste
#   - PasteSelection
#   - Copy
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Quit
#   - ClearLogNotice
#   - SpawnNewInstance
#   - ToggleFullscreen
#   - None
#
# Values for `action` (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# Values for `command`:
#   The `command` field must be a map containing a `program` string and
#   an `args` array of command line parameter strings.
#
#   Example:
#       `command: { program: "alacritty", args: ["-e", "vttest"] }`
#
# Values for `mode`:
#   - ~AppCursor
#   - AppCursor
#   - ~AppKeypad
#   - AppKeypad
#
key_bindings:
  - { key: V, mods: Control|Shift, action: Paste }
  - { key: C, mods: Control|Shift, action: Copy }
  - { key: Key0, mods: Control, action: ResetFontSize }
  - { key: Equals, mods: Control, action: IncreaseFontSize }
  - { key: Plus, mods: Control, action: IncreaseFontSize }
  - { key: Minus, mods: Control, action: DecreaseFontSize }
  - { key: T, mods: Control|Shift, action: SpawnNewInstance }
  - { key: Space, mods: Control, chars: "\x00" } # Fix for Ctrl+Space null issue

# Mouse bindings
#
# Available fields:
# - mouse
# - action
# - mods (optional)
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# All available `mods` and `action` values are documented in the key binding
# section.
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }
