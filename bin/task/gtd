#!/bin/bash

# A simple shell script for effective time management.
#
# All the credits goes to Conner McDaniel for this amazing script
# https://github.com/connermcd/gtd
# ---------------------------------------------------------------
# Updates:
# 2020-06-12: Added WSL support. .wav files needs to be stored in
#             /mnt/c/Users/${WIN_USERNAME}/Documents/gtd/espeak
# 2020-07-01: Added xcowsay popup. Usage, add `-p` flag.
# 2020-07-06: Disown some do_options commands to independently run without
#             waiting for prior command to finish first.
# 2020-07-10: Added session lock feature on break. Unlocking on work.
# 2020-07-11: More robust popup and lock feature.

set -e

# Command configuration
if [[ $(grep -i microsoft /proc/version) ]]; then
  # Export somewhere: WIN_USERNAME=$(cmd.exe /c "<nul set /p=%USERNAME%" 2>/dev/null)
  GTD_HOME="${GTD_HOME:-"/mnt/c/Users/${WIN_USERNAME}/.gtd"}"
  SPEAK_CMD="${SPEAK_CMD:-"cd ${GTD_HOME}/espeak; cmd.exe /c start"}"
else
  GTD_HOME="${GTD_HOME:-"$HOME/.gtd"}"
  SPEAK_CMD="${SPEAK_CMD:-"cd ${GTD_HOME}/espeak; &>/dev/null aplay"}"
fi
CUSTOM_CMD="${CUSTOM_CMD:-"clear"}"
LOCK_CMD="${LOCK_CMD:-"loginctl"}"
NOTIFY_CMD="${NOTIFY_CMD:-"notify-send"}"
POPUP_CMD="${POPUP_CMD:-"xcowsay --font 'mono 40' -t 3"}"

# Setting configuration
DEFAULT_WORK_LENGTH="${DEFAULT_WORK_LENGTH:-"15"}"
DEFAULT_BREAK_LENGTH="${DEFAULT_BREAK_LENGTH}"
LOCK_CMD_BREAK="${LOCK_CMD_BREAK:-"lock-session"}"
LOCK_CMD_WORK="${LOCK_CMD_WORK:-"unlock-session"}"
NOTIFY_WORK="${NOTIFY_WORK:-"\"TIME TO WORK!\""}"
NOTIFY_BREAK="${NOTIFY_BREAK:-"\"Take a break\""}"
MPD_CMD_BREAK="${MPD_CMD_BREAK:-"spotifycli --pause"}"
MPD_CMD_WORK="${MPD_CMD_WORK:-"spotifycli --play"}"
POPUP_WORK="${POPUP_WORK:-"${NOTIFY_WORK} --image=${GTD_HOME}/imgs/work_1.jpg"}"
POPUP_BREAK="${POPUP_BREAK:-"${NOTIFY_BREAK} --image=${GTD_HOME}/imgs/break_1.jpg"}"
SPEAK_WORK="${SPEAK_WAV_WORK:-"espeak_gtd_work_m_v4.wav"}"
SPEAK_BREAK="${SPEAK_WAV_BREAK:-"espeak_gtd_break_f_v4.wav"}"

# File configuration
CFG_FILE="${CFG_FILE:-"$HOME/.gtd/.gtdrc"}"

# Check for configuration file and source it
if [[ -e "$CFG_FILE" ]]; then
   source "$CFG_FILE"
fi

# Display help
usage() {
cat << EOF
USAGE:

   gtd [ -bcmnpst ] [ work length ] [ break length ]

OPTIONS:

   -b : start on a break
   -c : custom command (defaults to "clear")
   -l : lock session on break then unlock on work
   -m : toggle MPD on change
   -n : notify on change
   -p : popup command
   -s : speak command
   -t : show time in tmux status bar
   -T : update time in /tmp file
   -e : specify time to end at (e.g. 2:45pm today)

EOF
}

# Show an error message and print usage
error() {
   echo -e "\033[0;31m$1\033[0m"
   usage && exit 1
}

# Set flag options
while getopts "bclmnpstTe:h" opt; do
   case "$opt" in
      b) [[ -n "$DO_BREAK"    ]] && unset DO_BREAK    || DO_BREAK=true;;
      c) [[ -n "$DO_CUSTOM"   ]] && unset DO_CUSTOM   || DO_CUSTOM=true;;
      l) [[ -n "$DO_LOCK"     ]] && unset DO_LOCK     || DO_LOCK=true;;
      m) [[ -n "$DO_MPD"      ]] && unset DO_MPD      || DO_MPD=true;;
      n) [[ -n "$DO_NOTIFY"   ]] && unset DO_NOTIFY   || DO_NOTIFY=true;;
      p) [[ -n "$DO_POPUP"    ]] && unset DO_POPUP    || DO_POPUP=true;;
      s) [[ -n "$DO_SPEAK"    ]] && unset DO_SPEAK    || DO_SPEAK=true;;
      t) [[ -n "$DO_TMUX"     ]] && unset DO_TMUX     || DO_TMUX=true;;
      T) [[ -n "$DO_TMP_FILE" ]] && unset DO_TMP_FILE || DO_TMP_FILE=true;;
      e) END_TIME="$OPTARG";;
      h) usage && exit 0;;
      *) error "Invalid flag.";;
   esac
done 2>/dev/null
shift "$((OPTIND-1))"

# Make sure tmux is installed if it is required
if [[ -n "$DO_TMUX" ]]; then
   which tmux &>/dev/null || error "This feature requires \`tmux\` to be installed."
fi

if [[ -n "$END_TIME" ]]; then
   # Make sure at is installed if it is required
   which at &>/dev/null || error "This feature requires \`at\` to be installed."

   # Kill this process at $END_TIME
   at "$END_TIME" <<<"kill $$"
fi

# Set work length if specified and is a number
if [[ -z "$1" ]]; then
   work_length="$DEFAULT_WORK_LENGTH"
elif [[ "$1" =~ [^0-9] ]]; then
   error "Work length must be a number of minutes."
else
   work_length="$1"
fi

# Set break length if specified and is a number
if [[ -z "$2" ]]; then
   break_length="${DEFAULT_BREAK_LENGTH:-$(( $work_length / 5 ))}"
elif [[ "$2" =~ [^0-9] ]]; then
   error "Break length must be a number of minutes."
else
   break_length="$2"
fi

# Show error message for three arguments or more
[[ -n "$3" ]] && error "Only two arguments are allowed."

# Collect session statistics
total_working_time=0
count=1

# Displays milliseconds as HH:MM:SS
hms() {
   local S="$1"
   ((h=S/3600))
   ((m=S%3600/60))
   ((s=S%60))
   printf "%02d:%02d:%02d\n" "$h" "$m" "$s"
}

# Displays a countdown using hms() while sleeping ("visual" sleep)
vsleep() {
   left="$1"
   while [[ "$left" -gt 0 ]]; do
      hms="$(hms $left)"

      # Updates a temporary file for tmux to read from and refreshes the client
      if [[ -n "$DO_TMUX" ]]; then
          if [[ -n "$in_break" ]]; then
            (echo -ne " #[fg=yellow]$hms #[fg=cyan]Break" > /tmp/gtd-tmux)
            (tmux refresh-client -S)
          else
            (echo -ne " $hms #[fg=red]WORK!" > /tmp/gtd-tmux)
            (tmux refresh-client -S)
          fi
      fi

      if [[ -n "$DO_TMP_FILE" ]]; then
         (echo -ne "$hms" > /tmp/gtd)
      fi

      # Prints time information to terminal title bar
      if [[ -n "$in_break" ]]; then
         printf "\e]1;(brk) $hms\a"
      else
         printf "\e]1;(gtd) $hms\a"
      fi

      # Print the countdown to the terminal and decrement one second
      echo -e "$hms $(tput el)\r\c"
      sleep 1
      left="$(( $left - 1 ))"
   done
}

# Do various tasks based on the user-specified flags
do_options() {
   [[ -n "$DO_CUSTOM" ]] && eval "$CUSTOM_CMD"

   if [[ -n "$DO_NOTIFY" ]]; then
      if [[ -n "$in_break" ]]; then
         eval "$NOTIFY_CMD $NOTIFY_BREAK" &
      else
         eval "$NOTIFY_CMD $NOTIFY_WORK" &
      fi
   fi

   if [[ -n "$DO_SPEAK" ]]
   then
      if [[ -n "$in_break" ]]; then
         eval "$SPEAK_CMD $SPEAK_BREAK" &
      else
         eval "$SPEAK_CMD $SPEAK_WORK" &
      fi
   fi

   if [[ -n "$DO_POPUP" ]]; then
      if [[ -n "$in_break" ]]; then
          eval "$POPUP_CMD $POPUP_BREAK"
      else
          if [[ ! -n "$DO_LOCK" ]]; then
              eval "$POPUP_CMD --time=0 $POPUP_WORK"
          fi
      fi
   fi

   if [[ -n "$DO_LOCK" ]]; then
      if [[ -n "$in_break" ]]; then
          if [[ -n "$DO_POPUP" ]]; then
              eval "$POPUP_CMD '15s before locking session'" &
          fi
          sleep 12
          echo "Locking session in 3..." & eval "$POPUP_CMD --time=1 'Locking in 3...'"  & sleep 1
          echo "Locking session in 2..." & eval "$POPUP_CMD --time=1 'Locking in 2...'"  & sleep 1
          echo "Locking session in 1..." & eval "$POPUP_CMD --time=1 'Locking in 1...'" & sleep 1
          eval "$LOCK_CMD $LOCK_CMD_BREAK"
      else
          eval "$LOCK_CMD $LOCK_CMD_WORK"
          eval "$POPUP_CMD --time=0 $POPUP_WORK"
      fi
   fi

   if [[ -n "$DO_MPD" ]]; then
      if [[ -n "$in_break" ]]; then
          eval "$MPD_CMD_BREAK"
      else
          eval "$MPD_CMD_WORK"
      fi
   fi

   # [[ -n "$DO_MPD" ]] && (sleep 1 && eval "$MPD_CMD")
   return 0
}

# Handle CTRL-C interrupt
ctrl_c() {
   if [[ -n "$in_break" ]]; then
      total="$(hms $(( $total_working_time * 60 )) )"
   else
      total="$(hms $(( ($total_working_time + $work_length) * 60 - $left )))"
   fi

   echo -e "\rTotal working time: $total"

   # Prints total time to terminal title bar
   printf "\e]1;(tot) $total\a"

   exit 0
}

cleanup() {
   # Clear the temporary file and refresh tmux when interrupted/terminated
   [[ -n "$DO_TMP_FILE" ]] && rm /tmp/gtd

   [[ -n "$DO_TMUX" ]] && (tmux refresh-client -S && rm /tmp/gtd-tmux)

   exit 0
}

main() {
   # Display the initial session settings
   clear && echo "$work_length minute sessions with $break_length minute breaks."

   # Loop through work and break cycles
   while true; do
      # Break period
      if [[ -n "$DO_BREAK" ]]; then
         echo -e "Break. Total working time: $(hms $(( $total_working_time * 60 )))"
         in_break=true && do_options
         vsleep "$(( $break_length * 60 ))"
      else DO_BREAK=true; fi

      # Work period
      echo -e "Period #$count. Total working time: $(hms $(( $total_working_time * 60 )))"
      unset in_break && do_options
      vsleep "$(( $work_length * 60 ))"

      # Calculate totals
      total_working_time="$(( ($total_working_time + $work_length) ))"
      count="$(( $count + 1 ))"
   done
}

if [[ -z "$DEBUG" ]]; then
   trap ctrl_c INT TERM
   trap cleanup EXIT
   main
fi
