#!/bin/bash

# Updates all specified dotfiles from $DOTFILES_LIST into specified location.
#
# The $DOTFILESRC specifies the location of .dotfilesrc file to override default
# script variables.
#
# ############################## Script Variables ##############################
#
# DOTFILES_LIST = Bash array list of config (dot) files or directory to update.
# LOG_FILE_DIR  = Log file directory.
# LOG_FILE      = Log file name. Only logs on `-d` flag or debug mode.
#                       Defaults to current timestamp.
#
# ##############################################################################
#
# Author : Mark Lucernas -- https://github.com/marklcrns
# Date   : 2020-08-10


# Default script variables
DOTFILES_DEST_DIR="${HOME}/Projects/.dotfiles"
DOTFILES_LIST=()
LOG_FILE_DIR="${HOME}/log"
LOG_FILE="$(date +"%Y-%m-%dT%H:%M:%S")_$(basename -- $0).log"

# Source rc file if exist
if [[ -e "${DOTFILESRC}" ]]; then
  source "${DOTFILESRC}"
fi

# Display help
usage() {
cat << EOF
USAGE:

Updates all specified dotfiles from \$DOTFILES_LIST into specified location.

  dotupdate [ -dsvVy ]

OPTIONS:

   -d : debug mode (redirect output in log file)
   -s : silent
   -v : verbose
   -V : very verbose
   -y : skip confirmation
   -h : help

EOF
}

# Set flag options
while getopts "dsvVyh" opt; do
  case "$opt" in
    d) [[ -n "$DEBUG"           ]] && unset DEBUG                      || DEBUG=true;;
    s) [[ -n "$IS_SILENT"       ]] && unset IS_SILENT                  || IS_SILENT=true;;
    v) [[ -n "$IS_VERBOSE"      ]] && unset IS_VERBOSE                 || IS_VERBOSE=true;;
    V) [[ -n "$IS_VERY_VERBOSE" ]] && unset IS_VERBOSE IS_VERY_VERBOSE || IS_VERBOSE=true; IS_VERY_VERBOSE=true;;
    y) [[ -n "$SKIP_CONFIRM"    ]] && unset SKIP_CONFIRM               || SKIP_CONFIRM=true;;
    h) usage && exit 0;;
    *) error "Invalid flag.";;
  esac
done 2>/dev/null
shift "$((OPTIND-1))" # explanation https://unix.stackexchange.com/a/214151


SCRIPT_PATH="$(realpath -s "${0}")"
# Strip trailing '/' in DIR path variables
DOTFILES_DEST_DIR=$(echo ${DOTFILES_DEST_DIR} | sed -r "s,(.*)/$,\1,")
LOG_FILE_DIR=$(echo ${LOG_FILE_DIR} | sed -r "s,(.*)/$,\1,")

# Log stdout and stderr to $LOG_FILE in $LOG_FILE_DIR
if [[ -n "${DEBUG}" ]]; then
  # Strip trailing '/' in LOG_FILE_DIR path and append "/$LOG_FILE"
  LOG_FILE_PATH="$(echo ${LOG_FILE_DIR} | sed -r "s,(.*)/$,\1,")/${LOG_FILE}"
  # Create log directory if not existing
  if [[ ! -d "${LOG_FILE_DIR}" ]]; then
    mkdir -p "${LOG_FILE_DIR}"
  fi
  # Initialize log file
  echo -e "${SCRIPT_PATH} log outputs\n" > ${LOG_FILE_PATH}
fi

# Ansi color code variables
# Ref: https://techstop.github.io/bash-script-colors/
RED="\e[0;91m"
BLUE="\e[0;94m"
GREEN="\e[0;92m"
YELLOW="\033[1;33m"
WHITE="\e[0;97m"
EXPAND_BG="\e[K"
RED_BG="\e[0;101m${expand_bg}"
BLUE_BG="\e[0;104m${expand_bg}"
GREEN_BG="\e[0;102m${expand_bg}"
YELLOW_BG="\e[0;103m${expand_bg}"
BOLD="\e[1m"
ULINE="\e[4m"
NC="\e[0m" # No/reset color

# Stores message into $IN if string argument is passed in, else read from stdin
# and store it in $IN (used with pipe '|').  Only log message on debug mode.
# Echoes $IN if used with pipe.
log() {
  if [[ -n "$1" ]]; then
    IN="$1"
    [[ -n "${DEBUG}" ]] && echo -e "${IN}" >> "${LOG_FILE_PATH}"
  else
    read IN
    if [[ -n ${IN} ]]; then
      [[ -n "${DEBUG}" ]] && echo -e "${IN}" | tee -a "${LOG_FILE_PATH}"
    fi
  fi
}

echolog(){
  message=$1
  if [[ -n "${message}" ]]; then
    # echo if verbose
    [[ -n "${IS_VERBOSE}" ]] && [[ -z "${IS_SILENT}" ]] && echo -e "${message}"
    # Log message on debug mode
    [[ -n "${DEBUG}" ]] && echo -e "${message}" >> "${LOG_FILE_PATH}"
  else # Print newline if no message
    [[ -n "${IS_VERBOSE}" ]] && echo -e ""
    [[ -n "${DEBUG}" ]] && echo -e "" >> "${LOG_FILE_PATH}"
  fi
}

ok() {
  message="$1"
  if [[ -n "${message}" ]]; then
    [[ -z "${IS_SILENT}" ]] && echo -e "${GREEN}${message}${NC}"
    # Log message on debug mode
    [[ -n "${DEBUG}" ]] && echo -e "${message}" >> "${LOG_FILE_PATH}"
  fi
  exit 0
}

warning() {
  message="$1"
  if [[ -n "${message}" ]]; then
    [[ -z "${IS_SILENT}" ]] && echo -e "${YELLOW}${message}${NC}"
    # Log message on debug mode
    [[ -n "${DEBUG}" ]] && echo -e "${message}" >> "${LOG_FILE_PATH}"
  fi
}

abort() {
  message="$1"
  if [[ -n "${message}" ]]; then
    [[ -z "${IS_SILENT}" ]] && echo -e "${YELLOW}${message}${NC}"
    # Log message on debug mode
    [[ -n "${DEBUG}" ]] && echo -e "${message}" >> "${LOG_FILE_PATH}"
  fi
  exit 1
}

error() {
  message="$1"
  exitcode="$2"
  if [[ -n "${message}" ]]; then
    [[ -z "${IS_SILENT}" ]] && echo -e "${RED}${message}${NC}"
    # Log message on debug mode
    [[ -n "${DEBUG}" ]] && echo -e "${message}" >> "${LOG_FILE_PATH}"
  fi
  # Exit with specified exit code. Do not exit if no exit code
  if [[ -n ${exitcode} ]]; then
    [[ ${exitcode} -ge 0 ]] && exit ${exitcode}
  fi
}
