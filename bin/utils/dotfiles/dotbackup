#!/bin/bash

# Backs up all specified dotfiles from DOTFILES_LIST into DOTFILES_BACKUP_DIR
# within a current timestamp named directory.
#
# The $DOTFILESRC specifies the location of .dotfilesrc file to override default
# script variables.
#
# ########################## Script Global Variables ###########################
#
# DEFAULT_DOTFILES_BACKUP_LIMIT = Sets the default auto clean backup limit
# DOTFILES_BACKUP_DIR           = Specifies the location of backup files.
# DOTFILES_LIST                 = Bash array list of config (dot) files or
#                                 directory to backup.
# DOTFILES_SOURCE_DIR           = Default source directory to backup dotfiles
#                                 from.
# BACKUP_DIR_NAME               = Backup directory name. Defaults to current
#                                 timestamp.
# LOG_FILE_DIR                  = Log file directory.
# LOG_FILE                      = Log file name. Only logs on `-d` flag or debug
#                                 mode. Defaults to current timestamp.
#
# ##############################################################################
#
# Author : Mark Lucernas <https://github.com/marklcrns>
# Date   : 2020-08-02


# Default script variables
DEFAULT_DOTFILES_BACKUP_LIMIT=10
DOTFILES_BACKUP_DIR="${HOME}/.dotfiles.bak"
DOTFILES_LIST=()
DOTFILES_SOURCE_DIR="${HOME}"
BACKUP_DIR_NAME="$(date +"%Y-%m-%dT%H:%M:%S")_old_dotfiles.bak"
LOG_FILE_DIR="${HOME}/log"
LOG_FILE="$(date +"%Y-%m-%dT%H:%M:%S")_$(basename -- $0).log"

SCRIPTPATH="$(realpath -s $0)"

# Ansi color code variables
RED="\e[0;91m"
BLUE="\e[0;94m"
GREEN="\e[0;92m"
YELLOW="\033[1;33m"
WHITE="\e[0;97m"
EXPAND_BG="\e[K"
RED_BG="\e[0;101m${expand_bg}"
BLUE_BG="\e[0;104m${expand_bg}"
GREEN_BG="\e[0;102m${expand_bg}"
YELLOW_BG="\e[0;103m${expand_bg}"
BOLD="\e[1m"
ULINE="\e[4m"
NC="\e[0m" # No/reset color


# Source rc file if exist
if [[ -e "${DOTFILESRC}" ]]; then
  source "${DOTFILESRC}"
fi


# Display help
usage() {
cat << EOF
USAGE:

Backs up all specified dotfiles from DOTFILES_LIST into DOTFILES_BACKUP_DIR
within a current timestamp named directory.

  dotbackup [ -adsvVy ] [ -A backups-limit ]

OPTIONS:

   -a : auto clean old backups if greater than default limit
   -A : auto clean old backups if greater than specified limit
   -d : debug mode (redirect output in log file)
   -s : silent
   -v : verbose
   -V : very verbose
   -y : skip confirmation
   -h : help

EOF
}

# Set flag options
while getopts "aA:dsvVyh" opt; do
  case "$opt" in
    a) [[ -n "$AUTO_CLEAN"      ]] && unset AUTO_CLEAN                 || AUTO_CLEAN=true;;
    A) [[ -n "$AUTO_CLEAN"      ]] && unset AUTO_CLEAN                 || AUTO_CLEAN=true; DOTFILES_BACKUP_LIMIT="${OPTARG}";;
    d) [[ -n "$DEBUG"           ]] && unset DEBUG                      || DEBUG=true;;
    s) [[ -n "$IS_SILENT"       ]] && unset IS_SILENT                  || IS_SILENT=true;;
    v) [[ -n "$IS_VERBOSE"      ]] && unset IS_VERBOSE                 || IS_VERBOSE=true;;
    V) [[ -n "$IS_VERY_VERBOSE" ]] && unset IS_VERBOSE IS_VERY_VERBOSE || IS_VERBOSE=true; IS_VERY_VERBOSE=true;;
    y) [[ -n "$SKIP_CONFIRM"    ]] && unset SKIP_CONFIRM               || SKIP_CONFIRM=true;;
    h) usage && exit 0;;
    *) usage && echo -e "${SCRIPTPATH}:\n${RED}ERROR: Invalid flag.${NC}"
      exit 1
  esac
done 2>/dev/null
shift "$((OPTIND-1))" # explanation https://unix.stackexchange.com/a/214151

# Log message into LOG_FILE_PATH. Can be used with pipeline '|' to log message
# from stdout.
# Second argument accepts integer value of 1 only to force silent.
# Logs message on DEBUG.
# Echo message if IS_VERY_VERBOSE
log() {
  message=$1
  force_silent=$2
  if [[ -n "$message" ]]; then
    IN="$message"
    [[ -n "${DEBUG}" ]] && echo -e "${IN}" >> "${LOG_FILE_PATH}"
  else
    read IN
    if [[ -n ${IN} ]]; then
      [[ -n "${DEBUG}" ]] && echo -e "${IN}" >> "${LOG_FILE_PATH}"
    fi
    # Echo log message if IS_VERY_VERBOSE
    if [[ -n "${IS_VERY_VERBOSE}" ]]; then
      [[ ${force_silent} -ne 1 ]] && echo -e "$message" # Skip message if force_silent
    fi
  fi
}

# Echo message and log into LOG_FILE_PATH.
# Second argument accepts integer value of 1 only to force silent.
# Logs message on DEBUG.
echolog(){
  message=$1
  force_silent=$2
  if [[ -n "${message}" ]]; then
    # echo if verbose
    [[ -z "${IS_SILENT}" ]] && [[ ${force_silent} -ne 1 ]] &&
      echo -e "${message}"
    # Log message on debug mode
    [[ -n "${DEBUG}" ]] && echo -e "${message}" >> "${LOG_FILE_PATH}"
  else # Print newline if no message
    [[ -z "${IS_SILENT}" ]] && [[ ${force_silent} -ne 1 ]] &&
      echo -e ""
    [[ -n "${DEBUG}" ]] && echo -e "" >> "${LOG_FILE_PATH}"
  fi
}

# Execute command string with `eval` then log into LOG_FILE_PATH
# Second argument accepts integer value of 1 only to force silent.
# Logs message on DEBUG.
# Echo message if IS_VERBOSE
execlog() {
  command_string=$1
  force_silent=$2
  if [[ -n "${command_string}" ]]; then
    # echo if verbose
    [[ -n "${IS_VERBOSE}" ]] && [[ -z "${IS_SILENT}" ]] && [[ ${force_silent} -ne 1 ]] &&
      echo -e "${command_string}"
    # Log command_string on debug mode
    [[ -n "${DEBUG}" ]] && echo -e "${command_string}" >> "${LOG_FILE_PATH}"
    # execute command
    eval "${command_string}" && return 0 || return 1
  else
    # Return error if no command given
    [[ -z "${IS_SILENT}" ]] && [[ ${force_silent} -ne 1 ]] &&
      echolog "${RED}${FUNCNAME[0]}(): Command not found${NC}"
    [[ -n "${DEBUG}" ]] && echo -e "${FUNCNAME[0]}: Command not found" >> "${LOG_FILE_PATH}"
    return 1
  fi
}

# Echo message in GREEN characters
# Second argument accepts integer value of 1 only to force silent.
# Logs message on DEBUG.
ok() {
  message=$1
  force_silent=$2
  if [[ -n "${message}" ]]; then
    [[ -z "${IS_SILENT}" ]] && [[ ${force_silent} -ne 1 ]] &&
      echo -e "${GREEN}${message}${NC}"
    # Log message on debug mode
    [[ -n "${DEBUG}" ]] && echo -e "${message}" >> "${LOG_FILE_PATH}"
  fi
}

# Echo message in YELLOW characters
# Second argument accepts integer value of 1 only to force silent.
# Logs message on DEBUG.
warning() {
  message=$1
  force_silent=$2
  if [[ -n "${message}" ]]; then
    [[ -z "${IS_SILENT}" ]] && [[ ${force_silent} -ne 1 ]] &&
      echo -e "${YELLOW}${message}${NC}"
    # Log message on debug mode
    [[ -n "${DEBUG}" ]] && echo -e "${message}" >> "${LOG_FILE_PATH}"
  fi
}

# Echo message in YELLOW characters and `exit` script with exit code 1
# Second argument accepts integer value of 1 only to force silent.
# Logs message on DEBUG.
abort() {
  message=$1
  force_silent=$2
  if [[ -n "${message}" ]]; then
    [[ -z "${IS_SILENT}" ]] && [[ ${force_silent} -ne 1 ]] &&
      echo -e "${YELLOW}${message}${NC}"
    # Log message on debug mode
    [[ -n "${DEBUG}" ]] && echo -e "${message}" >> "${LOG_FILE_PATH}"
  fi
  exit 1
}

# Echo message in RED characters and `exit` script with exit code 1.
# Second argument accepts integer to override default exit code.
# Third argument accepts integer value of 1 only to force silent.
# Logs message on DEBUG.
error() {
  message=$1
  exit_code=$2
  force_silent=$3
  if [[ -n "${message}" ]]; then
    if [[ -n ${exit_code} ]]; then # Remove SCRIPTPATH if no exit code
      [[ -z "${IS_SILENT}" ]] && [[ ${force_silent} -ne 1 ]] &&
        echo -e "${RED}\n${SCRIPTPATH}: ${message}${NC}"
    else
      [[ -z "${IS_SILENT}" ]] && [[ ${force_silent} -ne 1 ]] &&
        echo -e "${RED}${message}${NC}"
    fi
    # Log message on debug mode
    if [[ -n ${exit_code} ]]; then # Remove SCRIPTPATH if no exit code
      [[ -n "${DEBUG}" ]] && echo -e "\n${SCRIPTPATH}: ${message}" >> "${LOG_FILE_PATH}"
    else
      [[ -n "${DEBUG}" ]] && echo -e "${message}" >> "${LOG_FILE_PATH}"
    fi
  fi
  # Exit with specified exit code. Do not exit if no exit code
  if [[ -n ${exit_code} ]]; then
    [[ ${exit_code} -ge 0 ]] && exit ${exit_code}
  fi
}

# Echo message in GREEN characters and `exit` with exit code 0
# Second argument accepts integer value of 1 only to force silent.
# Logs message on DEBUG.
finish() {
  message=$1
  force_silent=$2
  if [[ -n "${message}" ]]; then
    [[ -z "${IS_SILENT}" ]] && [[ ${force_silent} -ne 1 ]] &&
      echo -e "\n${message}"
    # Log message on debug mode
    [[ -n "${DEBUG}" ]] && echo -e "\n${message}" >> "${LOG_FILE_PATH}"
  fi
  exit 0
}

# Strip trailing '/' in DIR path variables
DOTFILES_BACKUP_DIR=$(echo ${DOTFILES_BACKUP_DIR} | sed 's,/*$,,')
DOTFILES_SOURCE_DIR=$(echo ${DOTFILES_SOURCE_DIR} | sed 's,/*$,,')
LOG_FILE_DIR=$(echo ${LOG_FILE_DIR} | sed 's,/*$,,')

# Log stdout and stderr to $LOG_FILE in $LOG_FILE_DIR
if [[ -n "${DEBUG}" ]]; then
  # Append LOG_FILE
  LOG_FILE_PATH="${LOG_FILE_DIR}/${LOG_FILE}"
  # Create log directory if not existing
  if [[ ! -d "${LOG_FILE_DIR}" ]]; then
    mkdir -p "${LOG_FILE_DIR}"
  fi
  # Initialize log file
  echo -e "${SCRIPTPATH} log outputs\n" > ${LOG_FILE_PATH}
fi

################################# START SCRIPT #################################

# Set default backup limit if DOTFILES_BACKUP_LIMIT is invalid
if [[ -n "${AUTO_CLEAN}" ]]; then
  [[ ${DOTFILES_BACKUP_LIMIT} -lt 0 ]] &&
    DOTFILES_BACKUP_LIMIT=${DEFAULT_DOTFILES_BACKUP_LIMIT}
fi

dotfiles_count=0

echolog "Backing up the following files in '${DOTFILES_BACKUP_DIR}/${BACKUP_DIR_NAME}'..."
for dotfile in ${DOTFILES_LIST[@]};
do
  echolog ${dotfile}
  let "dotfiles_count++"
done

# Abort if no dotfiles detected
if [[ ${dotfiles_count} -eq 0 ]]; then
  abort "\nAborting... No dotfiles to backup."
fi

echolog "\nTotal filepaths in DOTFILES_LIST: ${dotfiles_count}"

# Confirmation
if [[ -z "${SKIP_CONFIRM}" ]]; then
  log "Do you wish to continue? (Y/y): \n" 1
  confirm "Do you wish to continue? (Y/y): "
  if [[ "${?}" -eq 1 ]]; then
    abort "Update aborted."
  elif [[ "${?}" -eq 2 ]]; then
    error "Unsupported shell"
  fi
fi


echolog
echolog "Backing up local dotfiles..."
echolog

# Create backup directory
mkdir -p "${DOTFILES_BACKUP_DIR}/${BACKUP_DIR_NAME}"

# Backup all dotfiles
for dotfile in ${DOTFILES_LIST[@]};
do
  # Strip source directory from path
  dotfile_stripped=$(echo $dotfile | sed "s,${DOTFILES_SOURCE_DIR}/,,")
  # Strip basename for non-directory or last subdirectory
  subdir=$(echo ${dotfile_stripped} | sed "s,$(basename $dotfile).*,,")
  # Strip trailing '/' in directory path
  subdir=$(echo ${subdir} | sed 's,/*$,,')
  dotfile_stripped=$(echo ${dotfile_stripped} | sed 's,/*$,,')

  full_backup_dir="${DOTFILES_BACKUP_DIR}/${BACKUP_DIR_NAME}"

  # Append subdir to full path
  if [[ -n "${subdir}" ]]; then
    full_backup_dir="${full_backup_dir}/${subdir}"
    # Create subdirectories
    execlog "mkdir -p ${full_backup_dir}"
  fi
  # Copy dotfile into backup directory
  if execlog "cp -rL ${DOTFILES_SOURCE_DIR}/${dotfile_stripped} ${full_backup_dir}"; then
    ok "${DOTFILES_SOURCE_DIR}/${dotfile_stripped} -> ${full_backup_dir}"
  else
    error "Failed to copy ${DOTFILES_SOURCE_DIR}/${dotfile_stripped} -> ${full_backup_dir}"
  fi
done

errors_count=0
# Final check if all files and directories are copied
for dotfile in ${DOTFILES_LIST[@]};
do
  # Strip source directory from path
  dotfile_stripped=$(echo $dotfile | sed "s,${DOTFILES_SOURCE_DIR}/,,")
  full_backup_dir="${DOTFILES_BACKUP_DIR}/${BACKUP_DIR_NAME}"

  if [[ ! -e "${full_backup_dir}/${dotfile_stripped}" ]]; then
    error "'${dotfile_stripped}' is missing from '${full_backup_dir}'"
    errors_count=$((errors_count+1))
  fi
done

[[ ${errors_count} -gt 0 ]] && error "Missing files in backup directory" 2

# Auto clean backup directory if AUTO_CLEAN
if [[ -n "${AUTO_CLEAN}" ]]; then
  if [[ -n "${IS_VERY_VERBOSE}" ]]; then
    ./dotclearbak -Vy ${DOTFILES_BACKUP_LIMIT}
  elif [[ -n ${IS_VERBOSE} ]]; then
    ./dotclearbak -vy ${DOTFILES_BACKUP_LIMIT}
  else
    ./dotclearbak -y ${DOTFILES_BACKUP_LIMIT}
  fi
fi

# Catch if dotclearbak failed
[[ $? -ne 0 ]] && error "Failed to clear backup files" $?

finish "${DOTFILES_BACKUP_DIR}/${BACKUP_DIR_NAME} backup created!"

