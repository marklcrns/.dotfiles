#!/bin/bash

################################################################################
# Git helper tool for bulk git local repositories operations.
#
# Accepts a string list of of git local repository (CONF_REPO_LIST, delimited by
# new line '\n') for bulk git operation. Also accepts a directory containing
# multiple git local repositories, storing github links of all repositories and
# relative paths for portability and bulk git operations.
#
# The $DOTFILESRC specifies the location of .dotfilesrc file to override default
# script variables.
#
################################# DEPENDENCIES #################################
#
# ../../scripting-utils/colors  Pre-defined global variables for colorful string
#                               outputs.
# ../../scripting-utils/utils   Utility functions for detailed debugging
#                               outputs.
#
########################### Script Global Variables ############################
#
# LOG_FILE_DIR = Log file directory.
# LOG_FILE     = Log file name. Only logs on `-d` flag or debug
#                mode. Defaults to current timestamp.
#
################################## Resources ###################################
#
# https://stackoverflow.com/q/5143795/11850077
# https://stackoverflow.com/a/24775215/11850077
# https://stackoverflow.com/q/2180270/11850077
#
################################################################################
# Author : Mark Lucernas <https://github.com/marklcrns>
# Date   : 2020-08-11
################################################################################





################################################## CONSTANT GLOBAL VARIABLES ###

LOG_FILE_DIR="${HOME}/log"
LOG_FILE="$(date +"%Y-%m-%dT%H:%M:%S")_$(basename -- $0).log"

SCRIPTPATH="$(realpath -s $0)"
SCRIPTDIR=$(dirname ${SCRIPTPATH})

############################################## EXTERNAL DEPENDENCIES SCRIPTS ###

# Ansi color code variables
if [[ -e "${SCRIPTDIR}/../../scripting-utils/colors" ]]; then
  source "${SCRIPTDIR}/../../scripting-utils/colors"
else
  echo "${SCRIPTPATH} WARNING: Failed to source '../../scripting-utils/colors' dependency"
  echo
fi
# Utility functions
if [[ -e "${SCRIPTDIR}/../../scripting-utils/utils" ]]; then
  source "${SCRIPTDIR}/../../scripting-utils/utils"
else
  echo "${SCRIPTPATH} ERROR: Failed to source '../../scripting-utils/utils' dependency"
  exit 1
fi

############################################################### FLAG OPTIONS ###

# Display help
usage() {
  cat << EOF
USAGE:

Git helper tool for bulk git local repository operations.

  gbulk [ -DqvVy ] [ path-to-repo ] [ git-commands ]
  gbulk [ -DqvVy ] [ -l repo-list ] [ git-commands ]
  gbulk [ -DfpPqsvVy ] [ path-to-repo ]
  gbulk [ -DfpPqsvVy ] [ -l repo-list ]

OPTIONS:

  -D  debug mode (redirect output in log file)
  -l  use string list of git repositories delimited by new line
  -f  force git push or pull
  -p  pre-defined auto git push
  -P  pre-defined auto git pull
  -q  quite output
  -s  pre-defined auto git status
  -v  verbose output
  -V  very verbose output
  -y  skip confirmation
  -h  help

EOF
}

# Set flag options
while getopts "Dl:pPqsvVyh" opt; do
  case "$opt" in
    D) [[ -n "$DEBUG"           ]] && unset DEBUG                      || DEBUG=true;;
    f) [[ -n "$FORCE_REPO"      ]] && unset FORCE_REPO                 || FORCE_REPO=true;;
    l) [[ -n "$IS_REPO_LIST"    ]] && unset IS_REPO_LIST               || IS_REPO_LIST=true; REPO_LIST=${OPTARG};;
    p) [[ -n "$IS_PUSH"         ]] && unset IS_PUSH                    || IS_PUSH=true;;
    P) [[ -n "$IS_PULL"         ]] && unset IS_PULL                    || IS_PULL=true;;
    q) [[ -n "$IS_QUITE"        ]] && unset IS_QUITE                   || IS_QUITE=true;;
    s) [[ -n "$IS_STATUS"       ]] && unset IS_STATUS                  || IS_STATUS=true;;
    v) [[ -n "$IS_VERBOSE"      ]] && unset IS_VERBOSE                 || IS_VERBOSE=true;;
    V) [[ -n "$IS_VERY_VERBOSE" ]] && unset IS_VERBOSE IS_VERY_VERBOSE || IS_VERBOSE=true; IS_VERY_VERBOSE=true;;
    y) [[ -n "$SKIP_CONFIRM"    ]] && unset SKIP_CONFIRM               || SKIP_CONFIRM=true;;
    h) usage && exit 0;;
    *) usage && echo -e "${SCRIPTPATH}:\n${RED}ERROR: Invalid flag.${NC}"
      exit 1
  esac
done 2>/dev/null
shift "$((OPTIND-1))"

####################################################### PRE-EXECUTION SET UP ###

# Strip trailing '/' in DIR path variables
LOG_FILE_DIR=$(echo ${LOG_FILE_DIR} | sed 's,/*$,,')

# Log stdout and stderr to $LOG_FILE in $LOG_FILE_DIR
if [[ -n "${DEBUG}" ]]; then
  # Append LOG_FILE
  LOG_FILE_PATH="${LOG_FILE_DIR}/${LOG_FILE}"
  # Create log directory if not existing
  if [[ ! -d "${LOG_FILE_DIR}" ]]; then
    mkdir -p "${LOG_FILE_DIR}"
  fi
  # Initialize log file
  echo -e "${SCRIPTPATH} log outputs\n" > ${LOG_FILE_PATH}
fi

################################################## SCRIPT ARGUMENTS HANDLING ###

# Validate arguments
if [[ -z ${IS_REPO_LIST} ]]; then
  if [[ $# -lt 1 ]]; then
    usage && error "Valid arguments required" 1
  else
    # First argument
    REPO=$1
    if [[ -d "${REPO}/.git" ]]; then
      # Strip trailing '/' in directory path
      REPO=$(echo ${REPO} | sed 's,/*$,,')
    else
      error "${REPO} Not a git repository" 2
    fi
    # Ignore Git command arguments if IS_PUSH, IS_PULL, and IS_STATUS
    if [[ -z ${IS_PUSH} ]] && [[ -z ${IS_PULL} ]] && [[ -z ${IS_STATUS} ]]; then
      if [[ $# -lt 2 ]]; then
        # Concatenate all remaining arguments into GIT_COMMANDS
        shift
        while (($#)); do
          if [[ -n ${GIT_COMMANDS} ]]; then
            GIT_COMMANDS="${GIT_COMMANDS} ${1}"
          else
            GIT_COMMANDS="${1}"
          fi
          shift
        done
      fi
    fi
  fi
else # If IS_REPO_LIST
  # Ignore Git command arguments if IS_PUSH, IS_PULL, and IS_STATUS
  if [[ -z ${IS_PUSH} ]] && [[ -z ${IS_PULL} ]] && [[ -z ${IS_STATUS} ]]; then
    # Check arguments
    if [[ $# -lt 1 ]]; then
      usage && error "Valid arguments required" 1
    else
      # Concatenate all remaining arguments into GIT_COMMANDS
      while (($#)); do
        [[ -n ${GIT_COMMANDS} ]] &&
          GIT_COMMANDS="${GIT_COMMANDS} ${1}" || GIT_COMMANDS="${1}"
        shift
      done
    fi
  fi
fi

##################################################### SCRIPT MAIN EXECUTIONS ###

if [[ -n "${IS_REPO_LIST}" ]]; then
  echolog "Repo List:"
  echolog "${REPO_LIST}"
else
  echolog "Repo: ${REPO}"
fi

if [[ -z ${IS_PUSH} ]] && [[ -z ${IS_PULL} ]] && [[ -z ${IS_STATUS} ]]; then
  echolog "Git commands: ${GIT_COMMANDS}"
fi

echolog

# Confirmation
if [[ -z "${SKIP_CONFIRM}" ]]; then
  log "Do you wish to continue? (Y/y): \n" 1
  confirm "Do you wish to continue? (Y/y): "
  if [[ "${?}" -eq 1 ]]; then
    abort "${SCRIPTPATH}: Aborted."
  elif [[ "${?}" -eq 2 ]]; then
    error "${SCRIPTPATH}: Unsupported shell"
  fi
fi


pushrepo() {
  git_repo=$1
  interval=$2
  # cd into repository
  execlog "cd ${git_repo}"
  # Check if is git repo
  [[ ! -d ".git" ]] && error "${git_repo} not a git repository" && return 1
  # Set default interval to 1 if non given
  [[ -z ${interval} ]] && interval=1
  # Check for git repo changes
  changes=$(git status --porcelain)
  branch_name=$(git symbolic-ref --short -q HEAD)
  remote_head=$(git log --decorate --oneline | grep "origin/${branch_name}")
  # Add, commit and push if has changes
  if [[ -n ${changes} ]]; then
    warning "Changes detected in ${git_repo}. Pushing changes..."
    echolog "${BO_NC}Adding all changes and committing in ${interval}...${NC}"
    # Sleep and for amount of time before proceeding
    sleep ${interval} &
    wait
    echolog
    execlog "git add ."
    if execlog "git commit" 1; then
      [[ -n ${FORCE_REPO} ]] &&
        execlog "git push --all --force" || execlog "git push --all"
      # If Authentication failed, push until successful or interrupted
      while [[ $? -eq 128 ]]; do
        [[ -n ${FORCE_REPO} ]] &&
          execlog "git push --all --force" || execlog "git push --all"
      done
    else
      warning "Repo '${git_repo} commit aborted"
    fi
  elif [[ ! "${remote_head}" == *"HEAD ->"* ]]; then
    # if HEAD ahead of remote or has something to push. push repo.
    [[ -n ${FORCE_REPO} ]] &&
      execlog "git push --all --force" || execlog "git push --all"
    while [[ $? -eq 128 ]]; do
      [[ -n ${FORCE_REPO} ]] &&
        execlog "git push --all --force" || execlog "git push --all"
    done
  else
    echolog "No changes detected in ${git_repo}. Skipping..."
  fi
}

pullrepo() {
  git_repo=$1
  # cd into repository
  execlog "cd ${git_repo}"
  # Check if is git repo
  [[ ! -d ".git" ]] && error "${git_repo} not a git repository" && return 1
  # Check for git repo changes
  changes=$(git status --porcelain --untracked-files=no)
  # Add, commit and push if has changes
  if [[ -n ${changes} ]]; then
    # Force pull repo if FORCE_PULL
    if [[ -n ${FORCE_REPO} ]]; then
      warning "Changes detected in ${git_repo} files. Hard resetting repo..."
      execlog "git reset --hard HEAD^"
      execlog "git pull --all"
    else
      warning "Changes detected in ${git_repo} files. Skipping repo..."
    fi
  else
    echolog "${git_repo}. Pulling from remote"
    execlog "git pull --all"
    # If Authentication failed, push until successful or interrupted
    while [[ ${?} -eq 128 ]]; do
      execlog "git push --all"
    done
  fi
}

statusrepo() {
  git_repo=$1
  # cd into repository
  execlog "cd ${git_repo}"
  # Check if is git repo
  [[ ! -d ".git" ]] && error "${git_repo} not a git repository" && return 1
  # Check for git repo changes
  changes=$(git status --porcelain)
  # Git status if has changes
  if [[ -n ${changes} ]]; then
    warning "Changes detected in ${git_repo}"
    execlog "git status"
  else
    echolog "No changes detected in ${git_repo}"
  fi
}

execgitcmd() {
  repo=$1
  # Check if repo is given
  [[ -z "${repo}" ]] && error "${FUNCNAME[0]}(): No repository arg specified" && return 1
  # Execute Git command
  if [[ -n "${IS_STATUS}" ]]; then
    statusrepo ${repo} 1
  elif [[ -n "${IS_PUSH}" ]]; then
    pushrepo ${repo} 1
  elif [[ -n "${IS_PULL}" ]]; then
    pullrepo ${repo} 1
  else
    if [[ -n "${GIT_COMMANDS}" ]]; then
      execlog "${GIT_COMMANDS}"
    else
      error "Missing Git commands" 1
    fi
  fi
}

# Execute Git command in repo(s)
if [[ -n "${IS_REPO_LIST}" ]]; then
  # Loop over all repo list excluding empty new line
  for repo in $(echo ${REPO_LIST}); do
    # continue if repo is empty String
    [[ -z "${repo}" ]] && continue
    # Wait until another git commit finish processing if exist
    if [[ -n $(ps -fc | grep "git commit$" | head -n 1 | awk '{print $2}') ]]; then
      wait $(ps -fc | grep "git commit$" | head -n 1 | awk '{print $2}')
    fi
    execgitcmd ${repo}
  done
else
  execgitcmd ${REPO}
fi

#################################################################### WRAP UP ###

# Clean log files
if [[ -n "${IS_VERY_VERBOSE}" ]]; then
  [[ -n "${DEBUG}" ]] && cleanlog 1000
else
  [[ -n "${DEBUG}" ]] && cleanlog 1000 1
fi

finish "All repo push complete!"

