#!/bin/bash

################################################################################
# Collection of bash script functions for detailed output and debugging.
#
# WARNING: This is not an executable script. This script is meant to be used as
# a utility by sourcing this script for efficient bash script writing.
#
################################# Functions ###################################
#
# log()      = Log message parameter into LOG_FILE_PATH.
# echolog()  = Echo message and log into LOG_FILE_PATH.
# execlog()  = Execute string command with `eval` and log into LOG_FILE_PATH.
# ok()       = Echo message in GREEN characters.
# finish()     = Echo message in GREEN characters and exit with 0 exit code.
# warning()  = Echo message in YELLOW characters.
# abort()    = Echo message in YELLOW characters and exit with 0 exit code.
# error()    = Echo message in RED characters and exit with 1 exit code by
#              default. Also accepts integer to override default exit code.
# cleanlog() = Clean oldest excess log files if exceeds $1 (limit) integer
#              argument.
#
# NOTE: All functions has force_silent local variable to disable function
# outputs.
#
################################# DEPENDENCIES #################################
#
# ./colors  Pre-defined global variables for colorful string
#           outputs.
#
########################### Script Global Variables ############################
#
# DEBUG           = Enables logging of all log functions.
# LOG_FILE_DIR    = Log file directory path
# LOG_FILE_PATH   = Log file destination path.
# IS_SILENT       = Disables output of all functions.
# IS_VERY_VERBOSE = Enables output of log() function.
# SCRIPTPATH      = Script absolute path `realpath -s $0`.
# RED             = ANSI red color code.
# GREEN           = ANSI green color code.
# YELLOW          = ANSI yellow color code.
# PURPLE          = ANSI purple color code.
# BO_NC           = ANSI bold color code.
#
################################################################################
# Author : Mark Lucernas <https://github.com/marklcrns>
# Date   : 2020-08-13
################################################################################





# Prevent from being executed directly in the terminal
if [ ${0##*/} == ${BASH_SOURCE[0]##*/} ]; then
  echo "WARNING:"
  echo "$(realpath -s $0) is not meant to be executed directly!"
  echo "Use this script only by sourcing it."
  echo
  exit 1
fi


# Log message into LOG_FILE_PATH. Can be used with pipeline '|' to log message
# from stdout.
# $2 argument accepts only integer value of 1 to force silent.
# Logs message on DEBUG.
# Echo message if IS_VERY_VERBOSE
function log() {
  message=$1
  force_silent=$2
  if [[ -n "$message" ]]; then
    IN="$message"
    [[ -n "${DEBUG}" ]] && echo -e "${IN}" >> "${LOG_FILE_PATH}"
  else
    read IN
    if [[ -n ${IN} ]]; then
      [[ -n "${DEBUG}" ]] && echo -e "${IN}" >> "${LOG_FILE_PATH}"
    fi
    # Echo log message if IS_VERY_VERBOSE
    if [[ -n "${IS_VERY_VERBOSE}" ]]; then
      [[ ${force_silent} -ne 1 ]] && echo -e "$message" # Skip message if force_silent
    fi
  fi
}

# Echo message and log into LOG_FILE_PATH.
# $2 argument accepts only integer value of 1 to force silent.
# Logs message on DEBUG.
function echolog(){
  message=$1
  force_silent=$2
  if [[ -n "${message}" ]]; then
    # echo if verbose
    [[ -z "${IS_SILENT}" && -z "${IS_QUITE}" ]] && [[ ${force_silent} -ne 1 ]] &&
      echo -e "${message}"
    # Log message on debug mode
    [[ -n "${DEBUG}" ]] && echo -e "${message}" >> "${LOG_FILE_PATH}"
  else # Print newline if no message
    [[ -z "${IS_SILENT}" && -z "${IS_QUITE}" ]] && [[ ${force_silent} -ne 1 ]] &&
      echo -e ""
    [[ -n "${DEBUG}" ]] && echo -e "" >> "${LOG_FILE_PATH}"
  fi
}

# Execute command string with `eval` then log into LOG_FILE_PATH
# $2 argument accepts only integer value of 1 to force silent.
# Logs message on DEBUG.
# Echo error message if IS_VERBOSE
# Echo execution message if IS_VERY_VERBOSE
function execlog() {
  command_string=$1
  force_silent=$2
  if [[ -n "${command_string}" ]]; then
    # execute command
    if eval ${command_string}; then
      if [[ -n "${IS_VERY_VERBOSE}" ]] && [[ -z "${IS_SILENT}" && -z "${IS_QUITE}" ]] && [[ ${force_silent} -ne 1 ]]; then
        echo -e "${PURPLE}Executing '${command_string}'${NC}"
      fi
      return 0
    else
      # echo if verbose
      if [[ -n "${IS_VERBOSE}" ]] && [[ -z "${IS_SILENT}" && -z "${IS_QUITE}" ]] && [[ ${force_silent} -ne 1 ]]; then
        echo -e "${RED}${FUNCNAME[0]}(): Command string '${command_string}' failed${NC}"
      fi
      # Log command_string on debug mode
      if [[ -n "${DEBUG}" ]]; then
        echo -e "${FUNCNAME[0]}(): Command string '${command_string}' failed" >> "${LOG_FILE_PATH}"
      fi
      return 1
    fi
    # echo if verbose
    if [[ -n "${IS_VERBOSE}" ]] && [[ -z "${IS_SILENT}" && -z "${IS_QUITE}" ]] && [[ ${force_silent} -ne 1 ]]; then
      echo -e "${command_string}"
    fi
    # Log command_string on debug mode
    if [[ -n "${DEBUG}" ]]; then
      echo -e "${command_string}" >> "${LOG_FILE_PATH}"
    fi
  else
    # Return error if no command given
    if [[ -z "${IS_SILENT}" && -z "${IS_QUITE}" ]] && [[ ${force_silent} -ne 1 ]]; then
      echo -e "${RED}${FUNCNAME[0]}(): Command string not found${NC}"
    fi
    if [[ -n "${DEBUG}" ]]; then
      echo -e "${FUNCNAME[0]}: Command string not found" >> "${LOG_FILE_PATH}"
    fi
    return 1
  fi
}

# Echo message in GREEN characters
# $2 argument accepts only integer value of 1 to force silent.
# Logs message on DEBUG.
function ok() {
  message=$1
  force_silent=$2
  if [[ -n "${message}" ]]; then
    [[ -z "${IS_SILENT}" && -z "${IS_QUITE}" ]] && [[ ${force_silent} -ne 1 ]] &&
      echo -e "${GREEN}${message}${NC}"
    # Log message on debug mode
    [[ -n "${DEBUG}" ]] && echo -e "${message}" >> "${LOG_FILE_PATH}"
  fi
}

# Echo message in YELLOW characters
# $2 argument accepts only integer value of 1 to force silent.
# Logs message on DEBUG.
function warning() {
  message=$1
  force_silent=$2
  if [[ -n "${message}" ]]; then
    [[ -z "${IS_SILENT}" && -z "${IS_QUITE}" ]] && [[ ${force_silent} -ne 1 ]] &&
      echo -e "${YELLOW}${message}${NC}"
    # Log message on debug mode
    [[ -n "${DEBUG}" ]] && echo -e "${message}" >> "${LOG_FILE_PATH}"
  fi
}

# Echo message in YELLOW characters and `exit` script with exit code 0
# $2 argument accepts only integer value of 1 to force silent.
# Logs message on DEBUG.
function abort() {
  message=$1
  force_silent=$2
  if [[ -n "${message}" ]]; then
    [[ -z "${IS_SILENT}" && -z "${IS_QUITE}" ]] && [[ ${force_silent} -ne 1 ]] &&
      echo -e "${YELLOW}${message}${NC}"
    # Log message on debug mode
    [[ -n "${DEBUG}" ]] && echo -e "${message}" >> "${LOG_FILE_PATH}"
  fi
  exit 0
}

# Echo message in RED characters and `exit` script with exit code 1.
# $2 argument accepts integer to override default exit code.
# $3 argument accepts only integer value of 1 to force silent.
# Logs message on DEBUG.
function error() {
  message=$1
  exit_code=$2
  force_silent=$3
  if [[ -n "${message}" ]]; then
    if [[ -n ${exit_code} ]]; then # Remove SCRIPTPATH if no exit code
      [[ -z "${IS_SILENT}" && -z "${IS_QUITE}" ]] && [[ ${force_silent} -ne 1 ]] &&
        echo -e "${RED}\n${SCRIPTPATH}: ${message}${NC}"
    else
      [[ -z "${IS_SILENT}" && -z "${IS_QUITE}" ]] && [[ ${force_silent} -ne 1 ]] &&
        echo -e "${RED}${message}${NC}"
    fi
    # Log message on debug mode
    if [[ -n ${exit_code} ]]; then # Remove SCRIPTPATH if no exit code
      [[ -n "${DEBUG}" ]] && echo -e "\n${SCRIPTPATH}: ${message}" >> "${LOG_FILE_PATH}"
    else
      [[ -n "${DEBUG}" ]] && echo -e "${message}" >> "${LOG_FILE_PATH}"
    fi
  fi
  # Exit with specified exit code. Do not exit if no exit code
  if [[ -n ${exit_code} ]]; then
    [[ ${exit_code} -ge 0 ]] && exit ${exit_code}
  fi
}

# Echo message in GREEN characters and `exit` with exit code 0
# $2 argument accepts only integer value of 1 to force silent.
# Logs message on DEBUG.
function finish() {
  message=$1
  force_silent=$2
  if [[ -n "${message}" ]]; then
    [[ -z "${IS_SILENT}" && -z "${IS_QUITE}" ]] && [[ ${force_silent} -ne 1 ]] &&
      echo -e "${BO_NC}\n${message}${NC}"
    # Log message on debug mode
    [[ -n "${DEBUG}" ]] && echo -e "\n${message}" >> "${LOG_FILE_PATH}"
  fi
  exit 0
}

# Clean excess log files in LOG_FILE_DIR exceeding $1 (limit) integer argument.
# $2 argument accepts only integer value of 1 to force silent.
# Logs message on DEBUG.
function cleanlog() {
  limit=$1
  force_silent=$2

  # Check if LOG_FILE_DIR is valid
  if [[ ! -e "${LOG_FILE_DIR}" ]]; then
    echo -e "${RED}\n${SCRIPTPATH}: LOG_FILE_DIR not specified. Skipping cleaning...${NC}"
    if [[ -n "${DEBUG}" ]]; then
      echo -e "\n${SCRIPTPATH}: LOG_FILE_DIR not specified. Skipping cleaning..." >> "${LOG_FILE_PATH}"
    fi
    return 1
  fi
  if [[ ! -d "${LOG_FILE_DIR}" ]]; then
    echo -e "${RED}\n${SCRIPTPATH}: Invalid backup directory path${NC}"
    if [[ -n "${DEBUG}" ]]; then
      echo -e "${RED}\n${SCRIPTPATH}: Invalid backup directory path${NC}" >> "${LOG_FILE_PATH}"
    fi
    exit 1
  fi

  # Set default limit if not specified
  [[ -z ${limit} ]] && limit=1000

  # Assess backups to be be removed
  log_file_count=$(ls "${LOG_FILE_DIR}" | wc -l)
  to_remove_count=$(( ${log_file_count} - ${limit} ))

  # Cache backup directories to be removed
  if [[ ${to_remove_count} -lt 0 ]]; then
    to_remove_count=${log_file_count}
  fi

  # Get total log files to delete
  if [[ -z "${IS_SILENT}" && -z "${IS_QUITE}" ]] && [[ ${force_silent} -ne 1 ]]; then
    echo
    echo -e "Removing excess log files:"
    echo
    echo -e "Total log files: \t\t${log_file_count}"
    echo -e "Oldest log files to remove: \t${to_remove_count}"
    echo -e "Limit: \t\t\t\t${limit}"
    echo
  fi
  if [[ -n "${DEBUG}" ]]; then
    echo "" >> "${LOG_FILE_PATH}"
    echo -e "Removing excess log files:" >> "${LOG_FILE_PATH}"
    echo "" >> "${LOG_FILE_PATH}"
    echo -e "Total log files: \t\t\t${backup_dir_count}" >> "${LOG_FILE_PATH}"
    echo -e "Oldest log files to remove: \t${to_remove_count}" >> "${LOG_FILE_PATH}"
    echo "" >> "${LOG_FILE_PATH}"
  fi

  # Abort if log files count is below limit
  if [[ ${to_remove_count} -eq 0 ]]; then # Abort if nothing to delete
    if [[ -z "${IS_SILENT}" && -z "${IS_QUITE}" ]] && [[ ${force_silent} -ne 1 ]]; then
      echo -e "No log files to delete."
    fi
    if [[ -n "${DEBUG}" ]]; then
      echo -e "No log files to delete." >> "${LOG_FILE_PATH}"
    fi
    return 0
  elif [[ ${log_file_count} -lt ${limit} ]]; then # Abort if still below limit
    if [[ -z "${IS_SILENT}" && -z "${IS_QUITE}" ]] && [[ ${force_silent} -ne 1 ]]; then
      echo -e "Log files still below limit. Skipping..."
    fi
    if [[ -n "${DEBUG}" ]]; then
      echo -e "Log files still below limit. Skipping..." >> "${LOG_FILE_PATH}"
    fi
    return 0
  fi

  if [[ -z "${IS_SILENT}" && -z "${IS_QUITE}" ]] && [[ ${force_silent} -ne 1 ]]; then
    echo -e "Removing excess backups..."
    echo
  fi
  if [[ -n "${DEBUG}" ]]; then
    echo -e "Removing excess backups..." >> "${LOG_FILE_PATH}"
  fi

  # Get oldest log files amount based on limit
  to_remove_list="$(ls -1 ${LOG_FILE_DIR} | head -${to_remove_count})"
  removed_count=0
  # Execute log file removal
  while IFS= read -r log_file; do
    if rm -rf ${LOG_FILE_DIR}/${log_file}; then
      if [[ -z "${IS_SILENT}" && -z "${IS_QUITE}" ]] && [[ ${force_silent} -ne 1 ]]; then
        echo -e "${YELLOW}${LOG_FILE_DIR}/${log_file} deleted${NC}"
      fi
      if [[ -n "${DEBUG}" ]]; then
        echo -e "${LOG_FILE_DIR}/${log_file} deleted" >> "${LOG_FILE_PATH}"
      fi
      # Increment removed count
      removed_count=$((removed_count+1))
    else
      if [[ -z "${IS_SILENT}" && -z "${IS_QUITE}" ]] && [[ ${force_silent} -ne 1 ]]; then
        echo -e "${RED}Failed to remove ${LOG_FILE_DIR}/${log_file}${NC}"
      fi
      if [[ -n "${DEBUG}" ]]; then
        echo -e "Failed to remove ${LOG_FILE_DIR}/${log_file}" >> "${LOG_FILE_PATH}"
      fi
    fi
  done <<< "${to_remove_list}"

  # Final check
  new_backup_dir_count=$(ls "${LOG_FILE_DIR}" | wc -l)
  # Check if all log files due for deletion are deleted
  if [[ $(( ${new_backup_dir_count} + ${removed_count} )) -eq ${log_file_count} ]]; then
    if [[ -z "${IS_SILENT}" && -z "${IS_QUITE}" ]] && [[ ${force_silent} -ne 1 ]]; then
      echo
      echo -e  "Total log files removed: ${removed_count}"
    fi
    if [[ -n "${DEBUG}" ]]; then
      echo "" >> "${LOG_FILE_PATH}"
      echo -e  "Total log files removed: ${removed_count}" >> "${LOG_FILE_PATH}"
    fi
  else
    if [[ -z "${IS_SILENT}" && -z "${IS_QUITE}" ]] && [[ ${force_silent} -ne 1 ]]; then
      echo -e "${RED}\n${SCRIPTPATH}: Clearing log files failed${NC}"
    fi
    if [[ -n "${DEBUG}" ]]; then
      echo -e "\n${SCRIPTPATH}: Clearing log files failed"
    fi
    exit 2
  fi
}


######################################### BOILERPLATE TO INTEGRATE INTO SCRIPT ###


# ################################################## CONSTANT GLOBAL VARIABLES ###
#
# LOG_FILE_DIR="${HOME}/log"
# LOG_FILE="$(date +"%Y-%m-%dT%H:%M:%S")_$(basename -- $0).log"
#
# SCRIPTPATH="$(realpath -s $0)"
# SCRIPTDIR=$(dirname ${SCRIPTPATH})
#
# ############################################## EXTERNAL DEPENDENCIES SCRIPTS ###
#
# # Ansi color code variables
# if [[ -e "${SCRIPTDIR}/../../scripting-utils/colors" ]]; then
#   source "${SCRIPTDIR}/../../scripting-utils/colors"
# else
#   echo "${SCRIPTPATH} WARNING: Failed to source '../../scripting-utils/colors' dependency"
#   echo
# fi
# # Utility functions
# if [[ -e "${SCRIPTDIR}/../../scripting-utils/utils" ]]; then
#   source "${SCRIPTDIR}/../../scripting-utils/utils"
# else
#   echo "${SCRIPTPATH} ERROR: Failed to source '../../scripting-utils/utils' dependency"
#   exit 1
# fi
#
# ############################################################### FLAG OPTIONS ###
#
# # Display help
# usage() {
#   cat << EOF
# USAGE:
#
# Command description.
#
#   command [ -DsvVy ]
#
# OPTIONS:
#
#   -D  debug mode (redirect output in log file)
#   -s  silent output
#   -v  verbose output
#   -V  very verbose output
#   -y  skip confirmation
#   -h  help
#
# EOF
# }
#
# # Set flag options
# while getopts "DsvVyh" opt; do
#   case "$opt" in
#     D) [[ -n "$DEBUG"           ]] && unset DEBUG                      || DEBUG=true;;
#     s) [[ -n "$IS_SILENT"       ]] && unset IS_SILENT                  || IS_SILENT=true;;
#     v) [[ -n "$IS_VERBOSE"      ]] && unset IS_VERBOSE                 || IS_VERBOSE=true;;
#     V) [[ -n "$IS_VERY_VERBOSE" ]] && unset IS_VERBOSE IS_VERY_VERBOSE || IS_VERBOSE=true; IS_VERY_VERBOSE=true;;
#     y) [[ -n "$SKIP_CONFIRM"    ]] && unset SKIP_CONFIRM               || SKIP_CONFIRM=true;;
#     h) usage && exit 0;;
#     *) usage && echo -e "${SCRIPTPATH}:\n${RED}ERROR: Invalid flag.${NC}"
#       exit 1
#   esac
# done 2>/dev/null
# shift "$((OPTIND-1))"
#
# ####################################################### PRE-EXECUTION SET UP ###
#
# # Strip trailing '/' in DIR path variables
# LOG_FILE_DIR=$(echo ${LOG_FILE_DIR} | sed 's,/*$,,')
#
# # Log stdout and stderr to $LOG_FILE in $LOG_FILE_DIR
# if [[ -n "${DEBUG}" ]]; then
#   # Append LOG_FILE
#   LOG_FILE_PATH="${LOG_FILE_DIR}/${LOG_FILE}"
#   # Create log directory if not existing
#   if [[ ! -d "${LOG_FILE_DIR}" ]]; then
#     mkdir -p "${LOG_FILE_DIR}"
#   fi
#   # Initialize log file
#   echo -e "${SCRIPTPATH} log outputs\n" > ${LOG_FILE_PATH}
# fi
#
# ################################################## SCRIPT ARGUMENTS HANDLING ###
#
# ##################################################### SCRIPT MAIN EXECUTIONS ###
#
# #################################################################### WRAP UP ###

